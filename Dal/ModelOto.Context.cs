//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public interface IDbContext
    {

    }
    public partial class Entities : DbContext, IDbContext
    {

        static Entities()
        {
            Database.SetInitializer<Entities>(null);
            //    Database.SetInitializer(new MigrateDatabaseToLatestVersion<DomainDbContext, Configuration>());
        }

        //public Entities()
        //    : base("name=Entities")
        //{
        //}
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    
        //public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AuthTypes> AuthTypes { get; set; }
        public virtual DbSet<AutoServices> AutoServices { get; set; }
        public virtual DbSet<Bills> Bills { get; set; }
        public virtual DbSet<CaseTypes> CaseTypes { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<ChatLogs> ChatLogs { get; set; }
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<Colors> Colors { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Credits> Credits { get; set; }
        public virtual DbSet<Currencies> Currencies { get; set; }
        public virtual DbSet<DamageStates> DamageStates { get; set; }
        public virtual DbSet<Denominations> Denominations { get; set; }
        public virtual DbSet<Districts> Districts { get; set; }
        public virtual DbSet<EnginePowers> EnginePowers { get; set; }
        public virtual DbSet<EngineVolumes> EngineVolumes { get; set; }
        public virtual DbSet<FuelTypes> FuelTypes { get; set; }
        public virtual DbSet<Galleries> Galleries { get; set; }
        public virtual DbSet<GearTypes> GearTypes { get; set; }
        public virtual DbSet<GuarantySituations> GuarantySituations { get; set; }
        public virtual DbSet<Marks> Marks { get; set; }
        public virtual DbSet<ModelYears> ModelYears { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PaymentTypes> PaymentTypes { get; set; }
        public virtual DbSet<PlateNationalities> PlateNationalities { get; set; }
        public virtual DbSet<PostComments> PostComments { get; set; }
        public virtual DbSet<PostLikes> PostLikes { get; set; }
        public virtual DbSet<PostShares> PostShares { get; set; }
        public virtual DbSet<ProductCategoryProvider> ProductCategoryProvider { get; set; }
        public virtual DbSet<ProductGroupProvider> ProductGroupProvider { get; set; }
        public virtual DbSet<ProductGroups> ProductGroups { get; set; }
        public virtual DbSet<ProductPlaces> ProductPlaces { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductSeller> ProductSeller { get; set; }
        public virtual DbSet<ProductStates> ProductStates { get; set; }
        public virtual DbSet<ProductTypes> ProductTypes { get; set; }
        public virtual DbSet<PublishDurations> PublishDurations { get; set; }
        public virtual DbSet<Regions> Regions { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SpareParts> SpareParts { get; set; }
        public virtual DbSet<SubDistrict> SubDistrict { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Towns> Towns { get; set; }
        public virtual DbSet<TractionTypes> TractionTypes { get; set; }
        public virtual DbSet<TransportTypes> TransportTypes { get; set; }
        public virtual DbSet<UserAdresses> UserAdresses { get; set; }
        public virtual DbSet<UserEducationLevel> UserEducationLevel { get; set; }
        public virtual DbSet<UserFeedbacks> UserFeedbacks { get; set; }
        public virtual DbSet<UserFriends> UserFriends { get; set; }
        public virtual DbSet<UserGender> UserGender { get; set; }
        public virtual DbSet<UserJob> UserJob { get; set; }
        public virtual DbSet<UserMessages> UserMessages { get; set; }
        public virtual DbSet<UserPosts> UserPosts { get; set; }
        public virtual DbSet<UserProfile> UserProfile { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<UserTypes> UserTypes { get; set; }
        public virtual DbSet<VehicleTypes> VehicleTypes { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<BankBins> BankBins { get; set; }
        public virtual DbSet<Tokens> Tokens { get; set; }
    
        public virtual int Insert_Ford_StockToOtomotivist(string stockCode, Nullable<int> catId, string modelYear, string specialCode, Nullable<decimal> price, string stockName, Nullable<int> groupId, Nullable<int> markId, string productGroupName)
        {
            var stockCodeParameter = stockCode != null ?
                new ObjectParameter("StockCode", stockCode) :
                new ObjectParameter("StockCode", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var modelYearParameter = modelYear != null ?
                new ObjectParameter("ModelYear", modelYear) :
                new ObjectParameter("ModelYear", typeof(string));
    
            var specialCodeParameter = specialCode != null ?
                new ObjectParameter("SpecialCode", specialCode) :
                new ObjectParameter("SpecialCode", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockNameParameter = stockName != null ?
                new ObjectParameter("StockName", stockName) :
                new ObjectParameter("StockName", typeof(string));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var markIdParameter = markId.HasValue ?
                new ObjectParameter("MarkId", markId) :
                new ObjectParameter("MarkId", typeof(int));
    
            var productGroupNameParameter = productGroupName != null ?
                new ObjectParameter("ProductGroupName", productGroupName) :
                new ObjectParameter("ProductGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Ford_StockToOtomotivist", stockCodeParameter, catIdParameter, modelYearParameter, specialCodeParameter, priceParameter, stockNameParameter, groupIdParameter, markIdParameter, productGroupNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateStockCategory(string stockCode, Nullable<int> catId, string modelYear, string specialCode)
        {
            var stockCodeParameter = stockCode != null ?
                new ObjectParameter("StockCode", stockCode) :
                new ObjectParameter("StockCode", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var modelYearParameter = modelYear != null ?
                new ObjectParameter("ModelYear", modelYear) :
                new ObjectParameter("ModelYear", typeof(string));
    
            var specialCodeParameter = specialCode != null ?
                new ObjectParameter("SpecialCode", specialCode) :
                new ObjectParameter("SpecialCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStockCategory", stockCodeParameter, catIdParameter, modelYearParameter, specialCodeParameter);
        }
    }
}
